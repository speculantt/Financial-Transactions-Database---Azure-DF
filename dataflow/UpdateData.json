{
	"name": "UpdateData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "File_import",
						"type": "DatasetReference"
					},
					"name": "NewFile",
					"description": "financial import from santander"
				},
				{
					"dataset": {
						"referenceName": "fulldatabasefile",
						"type": "DatasetReference"
					},
					"name": "csvdatabasefile"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "fulldatabasefile",
						"type": "DatasetReference"
					},
					"name": "WriteDown",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "AddKey"
				},
				{
					"name": "AddKey1"
				},
				{
					"name": "RenameColumns"
				},
				{
					"name": "AddSource"
				},
				{
					"name": "AddSource1"
				},
				{
					"name": "SelectKeyOnly"
				},
				{
					"name": "PrepForUnion"
				},
				{
					"name": "UpdateInsert"
				},
				{
					"name": "join1"
				},
				{
					"name": "union1"
				},
				{
					"name": "FilterNulls"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {FECHA OPERACIÓN} as string,",
				"          {FECHA VALOR} as string,",
				"          CONCEPTO as string,",
				"          {IMPORTE EUR} as string,",
				"          SALDO as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     limit: 200,",
				"     ignoreNoFilesFound: false,",
				"     moveFiles: ['inputdata','ProcessedFiles']) ~> NewFile",
				"source(output(",
				"          DateOperation as string,",
				"          DateEffective as string,",
				"          Description as string,",
				"          Amount as string,",
				"          Saldo as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> csvdatabasefile",
				"FilterNulls derive(Key = crc32(concat({FECHA OPERACIÓN},{FECHA VALOR},{IMPORTE EUR},{SALDO}))) ~> AddKey",
				"csvdatabasefile derive(Key = crc32(concat(DateOperation,DateEffective,Amount,Saldo))) ~> AddKey1",
				"AddSource select(mapColumn(",
				"          DateOperation = {FECHA OPERACIÓN},",
				"          DateEffective = {FECHA VALOR},",
				"          Description = CONCEPTO,",
				"          Amount = {IMPORTE EUR},",
				"          Saldo = SALDO,",
				"          Key,",
				"          Source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumns",
				"AddKey derive(Source = 'newfile') ~> AddSource",
				"AddKey1 derive(Source = 'database') ~> AddSource1",
				"RenameColumns select(mapColumn(",
				"          NewFileKey = Key",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectKeyOnly",
				"RenameColumns select(mapColumn(",
				"          DateOperation,",
				"          DateEffective,",
				"          Description,",
				"          Amount,",
				"          Saldo,",
				"          Key,",
				"          Source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PrepForUnion",
				"join1 alterRow(updateIf(and(isNull(NewFileKey),Source=='database')),",
				"     insertIf(and(Key!=NewFileKey,Source=='newfile'))) ~> UpdateInsert",
				"union1, SelectKeyOnly join(Key == NewFileKey,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"AddSource1, PrepForUnion union(byName: true,",
				"     partitionBy('hash', 1))~> union1",
				"NewFile filter(or(not(isNull({FECHA OPERACIÓN})),not(isNull({IMPORTE EUR})))) ~> FilterNulls",
				"UpdateInsert sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          DateOperation as string,",
				"          DateEffective as string,",
				"          Description as string,",
				"          Amount as string,",
				"          Saldo as string",
				"     ),",
				"     partitionFileNames:['fulldatabasefile.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_container: 'blobcontainer',",
				"     mapColumn(",
				"          DateOperation,",
				"          DateEffective,",
				"          Description,",
				"          Amount,",
				"          Saldo",
				"     ),",
				"     partitionBy('hash', 1)) ~> WriteDown"
			]
		}
	}
}